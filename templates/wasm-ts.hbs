<!doctype html>
<html>

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="mobile-web-app-capable" content="yes">
	<meta http-equiv="Content-Security-Policy"
		content="default-src 'none'; connect-src {{{cspSource}}}; img-src {{{cspSource}}}; style-src {{{cspSource}}} 'unsafe-inline'; script-src 'nonce-{{nonce}}' 'unsafe-eval'; worker-src blob:;">

	<script nonce="{{nonce}}" src="{{{wasmjs}}}"></script>
	<title>Benchmark Visualization</title>
	<script nonce="{{nonce}}" src="{{chartJsUri}}"></script>
	<script nonce="{{nonce}}" src="{{{wasmVisualizationJs}}}"></script>
	<style>
		body {
			font-family: var(--vscode-font-family);
			color: var(--vscode-foreground);
			background-color: var(--vscode-editor-background);
			padding: 20px;
			margin: 0;
		}

		h1,
		h2 {
			color: var(--vscode-editor-foreground);
		}

		.metadata {
			margin-bottom: 20px;
			padding: 10px;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
			border-radius: 5px;
		}

		.controls {
			display: flex;
			flex-wrap: wrap;
			gap: 15px;
			margin-bottom: 20px;
			padding: 15px;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
			border-radius: 5px;
		}

		.control-group {
			flex: 1;
			min-width: 200px;
		}

		.control-group h3 {
			margin-top: 0;
		}

		label {
			display: block;
			margin-bottom: 5px;
		}

		select,
		input[type="color"],
		input[type="range"],
		input[type="text"],
		input[type="number"] {
			width: 100%;
			padding: 8px;
			margin-bottom: 10px;
			background-color: var(--vscode-input-background);
			color: var(--vscode-input-foreground);
			border: 1px solid var(--vscode-input-border);
			border-radius: 3px;
		}

		.apply-button {
			background-color: var(--vscode-button-background);
			color: var(--vscode-button-foreground);
			border: none;
			padding: 10px 20px;
			border-radius: 3px;
			cursor: pointer;
			margin-top: 20px;
			font-weight: bold;
		}

		.apply-button:hover {
			background-color: var(--vscode-button-hoverBackground);
		}

		.help-text {
			font-size: 0.9em;
			color: var(--vscode-descriptionForeground);
			margin-top: 10px;
		}

		button {
			background-color: var(--vscode-button-background);
			color: var(--vscode-button-foreground);
			border: none;
			padding: 8px 16px;
			border-radius: 3px;
			cursor: pointer;
			margin-top: 10px;
		}

		button:hover {
			background-color: var(--vscode-button-hoverBackground);
		}

		.benchmark-list {
			max-height: 200px;
			overflow-y: auto;
			padding: 5px;
			background-color: var(--vscode-input-background);
			border: 1px solid var(--vscode-input-border);
			border-radius: 3px;
		}

		.benchmark-item {
			display: flex;
			align-items: center;
			margin-bottom: 5px;
		}

		.benchmark-item input {
			margin-right: 8px;
		}

		.chart-container {
			position: relative;
			height: 400px;
			margin-top: 20px;
			padding: 15px;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
			border-radius: 5px;
		}

		.color-palette {
			display: flex;
			gap: 10px;
			margin-bottom: 10px;
		}

		.palette {
			cursor: pointer;
			display: flex;
			width: 100px;
			height: 20px;
			border-radius: 3px;
			overflow: hidden;
		}

		.palette-color {
			flex: 1;
			height: 100%;
		}

		.palette.selected {
			outline: 2px solid var(--vscode-focusBorder);
		}

		.custom-colors {
			display: flex;
			flex-wrap: wrap;
			gap: 5px;
			margin-top: 10px;
		}

		.color-input {
			display: flex;
			align-items: center;
			margin-bottom: 5px;
		}

		.color-input input {
			margin-right: 5px;
			width: 50px;
		}

		.tooltip {
			background-color: var(--vscode-editor-background);
			border: 1px solid var(--vscode-input-border);
			padding: 10px;
			border-radius: 5px;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
		}

		.error-message {
			color: var(--vscode-errorForeground);
			background-color: var(--vscode-inputValidation-errorBackground);
			border: 1px solid var(--vscode-inputValidation-errorBorder);
			padding: 10px;
			margin: 10px 0;
			border-radius: 5px;
		}

		/* Tab styles */
		.tabs {
			display: flex;
			margin-bottom: 0;
			border-bottom: 1px solid var(--vscode-input-border);
		}

		.tab {
			padding: 8px 16px;
			cursor: pointer;
			border-top-left-radius: 3px;
			border-top-right-radius: 3px;
			margin-right: 2px;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
		}

		.tab.active {
			background-color: var(--vscode-button-background);
			color: var(--vscode-button-foreground);
		}

		.tab-content {
			display: none;
			padding: 15px;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
			border-bottom-left-radius: 5px;
			border-bottom-right-radius: 5px;
		}

		.tab-content.active {
			display: block;
		}

		/* Settings styles */
		.grid-display-toggle,
		.animation-toggle {
			display: flex;
			align-items: center;
			margin-bottom: 10px;
		}

		.grid-display-toggle input,
		.animation-toggle input {
			margin-right: 8px;
		}

		.table-view {
			margin-top: 20px;
			width: 100%;
			border-collapse: collapse;
			overflow-x: auto;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
			border-radius: 5px;
		}

		.table-view table {
			width: 100%;
			border-collapse: collapse;
		}

		.table-view th,
		.table-view td {
			padding: 8px;
			text-align: left;
			border-bottom: 1px solid var(--vscode-input-border);
		}

		.table-view th {
			background-color: var(--vscode-button-background);
			color: var(--vscode-button-foreground);
		}

		.table-view tr:hover {
			background-color: var(--vscode-list-hoverBackground);
		}

		.export-buttons {
			display: flex;
			gap: 5px;
			margin-top: 10px;
		}

		/* Unified Layout Styles */
		.unified-layout {
			display: flex;
			gap: 20px;
			height: calc(100vh - 120px);
			min-height: 500px;
		}

		.side-panel {
			flex: 0 0 300px;
			overflow-y: auto;
			padding-right: 10px;
			max-height: 100%;
		}

		.main-panel {
			flex: 1;
			display: flex;
			flex-direction: column;
			gap: 20px;
			overflow-y: auto;
			max-height: 100%;
		}

		.table-container {
			flex: 1;
			min-height: 200px;
			background-color: var(--vscode-editor-inactiveSelectionBackground);
			border-radius: 5px;
			padding: 15px;
			overflow: auto;
			margin-top: 20px;
		}

		.config-row {
			display: flex;
			gap: 10px;
		}

		.config-col {
			flex: 1;
		}

		.delta-value {
			color: var(--vscode-charts-blue);
			font-size: 0.9em;
		}

		.has-warning {
			color: var(--vscode-editorWarning-foreground);
			text-decoration: underline dotted;
		}
	</style>
</head>

<body>
	<div id="error-container"></div>
	<div class="tabs">
		<div class="tab active" data-tab="unified-tab">Benchmark Visualization</div>
		<div class="tab" data-tab="settings-tab">Appearance</div>
	</div>

	<div id="unified-tab" class="tab-content active">
		<div class="unified-layout">
			<div class="side-panel">
				<div class="control-group">
					<h3>Benchmarks</h3>
					<div id="benchmark-list" class="benchmark-list">
						<!-- Benchmarks will be populated here -->
					</div>
				</div>

				<div class="control-group">
					<h3>Visualization</h3>
					<label for="metric-select">Metric:</label>
					<select id="metric-select">
						<!-- Metrics will be populated here -->
					</select>

					<label for="chart-type">Chart Type:</label>
					<select id="chart-type">
						<option value="bar">Bar Chart</option>
						<option value="line">Line Chart</option>
						<option value="radar">Radar Chart</option>
						<option value="polarArea">Polar Area</option>
						<option value="doughnut">Doughnut</option>
					</select>
				</div>

				<div class="control-group">
					<h3>Benchstat Configuration</h3>

					<label for="benchmark-filter">Filter:</label>
					<input type="text" id="benchmark-filter" placeholder="e.g. Algorithm1|Algorithm2">

					<label for="benchmark-row">Row:</label>
					<input type="text" id="benchmark-row" placeholder="e.g. \d+_\d+">

					<label for="benchmark-col">Column:</label>
					<input type="text" id="benchmark-col" placeholder="e.g. Version">

					<div class="config-row">
						<div class="config-col">
							<label for="benchmark-ignore">Ignore:</label>
							<input type="text" id="benchmark-ignore" placeholder="e.g. Setup|Cleanup">
						</div>
						<div class="config-col">
							<label for="benchmark-table">Table:</label>
							<input type="text" id="benchmark-table" placeholder="e.g. mem">
						</div>
					</div>

					<div class="config-row">
						<div class="config-col">
							<label for="benchmark-confidence">Confidence:</label>
							<input type="number" id="benchmark-confidence" min="0" max="1" step="0.05" value="0.95">
						</div>
						<div class="config-col">
							<label for="benchmark-compare-alpha">Alpha:</label>
							<input type="number" id="benchmark-compare-alpha" min="0" max="1" step="0.01" value="0.05">
						</div>
					</div>

					<button id="apply-config" class="apply-button">Apply Configuration</button>
				</div>

				<div class="control-group">
					<h3>Colors</h3>
					<div class="color-palette">
						<div class="palette selected" data-palette="default">
							<div class="palette-color" style="background-color: #4285F4"></div>
							<div class="palette-color" style="background-color: #EA4335"></div>
							<div class="palette-color" style="background-color: #FBBC05"></div>
							<div class="palette-color" style="background-color: #34A853"></div>
						</div>
						<div class="palette" data-palette="pastel">
							<div class="palette-color" style="background-color: #ff9aa2"></div>
							<div class="palette-color" style="background-color: #c7ceea"></div>
							<div class="palette-color" style="background-color: #b5ead7"></div>
							<div class="palette-color" style="background-color: #ffdac1"></div>
						</div>
					</div>
					<div class="export-buttons">
						<button id="export-png">Export PNG</button>
						<button id="export-svg">Export SVG</button>
					</div>
				</div>
			</div>

			<div class="main-panel">
				<div class="chart-container">
					<canvas id="benchmarkChart"></canvas>
				</div>

				<div class="table-container">
					<h3>Data Table</h3>
					<div class="table-view">
						<table id="data-table">
							<thead id="table-header">
								<!-- Table header will be added dynamically -->
							</thead>
							<tbody id="table-body">
								<!-- Table rows will be added dynamically -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div id="settings-tab" class="tab-content">
		<div class="controls">
			<div class="control-group">
				<h3>Chart Settings</h3>

				<div class="grid-display-toggle">
					<input type="checkbox" id="show-grid" checked>
					<label for="show-grid">Show Grid</label>
				</div>

				<div class="grid-display-toggle">
					<input type="checkbox" id="show-x-grid" checked>
					<label for="show-x-grid">X-axis Grid Lines</label>
				</div>

				<div class="grid-display-toggle">
					<input type="checkbox" id="show-y-grid" checked>
					<label for="show-y-grid">Y-axis Grid Lines</label>
				</div>

				<label for="point-style">Point Style</label>
				<select id="point-style">
					<option value="circle">Circle</option>
					<option value="cross">Cross</option>
					<option value="crossRot">Rotated Cross</option>
					<option value="dash">Dash</option>
					<option value="line">Line</option>
					<option value="rect">Rectangle</option>
					<option value="rectRounded">Rounded Rectangle</option>
					<option value="rectRot">Rotated Rectangle</option>
					<option value="star">Star</option>
					<option value="triangle">Triangle</option>
				</select>

				<div class="animation-toggle">
					<input type="checkbox" id="enable-animations" checked>
					<label for="enable-animations">Enable Animations</label>
				</div>

				<label for="legend-position">Legend Position</label>
				<select id="legend-position">
					<option value="top">Top</option>
					<option value="bottom">Bottom</option>
					<option value="left">Left</option>
					<option value="right">Right</option>
				</select>
			</div>

			<div class="control-group">
				<h3>Font Settings</h3>

				<label for="title-size">Title Font Size</label>
				<input type="range" id="title-size" min="8" max="24" value="14">
				<span id="title-size-value">14px</span>

				<label for="label-size">Axis Label Font Size</label>
				<input type="range" id="label-size" min="8" max="20" value="12">
				<span id="label-size-value">12px</span>

				<label for="tick-size">Tick Font Size</label>
				<input type="range" id="tick-size" min="6" max="16" value="10">
				<span id="tick-size-value">10px</span>
			</div>
		</div>
	</div>

	<script nonce="{{nonce}}">
		// Initialize the WASM visualization with the URL to the WASM binary
		const wasmUrl = '{{{WASM_URL}}}';
		const visualization = WasmVis.initializeWasmVisualization(wasmUrl);

		// Tab switching functionality
		document.querySelectorAll('.tab').forEach(tab => {
			tab.addEventListener('click', (event) => {
				const tabId = event.target.dataset.tab;
				switchTab(tabId);
			});
		});

		function switchTab(tabId) {
			// Hide all tab contents
			document.querySelectorAll('.tab-content').forEach(content => {
				content.classList.remove('active');
			});

			// Deactivate all tabs
			document.querySelectorAll('.tab').forEach(tab => {
				tab.classList.remove('active');
			});

			// Activate the selected tab and content
			document.getElementById(tabId).classList.add('active');
			document.querySelector(`.tab[data-tab="${tabId}"]`).classList.add('active');

			// Notify controller about tab change
			visualization.handleTabChange(tabId);
		}

		// Export functionality
		document.getElementById('export-png')?.addEventListener('click', () => {
			visualization.exportChart('png');
		});

		document.getElementById('export-svg')?.addEventListener('click', () => {
			visualization.exportChart('svg');
		});

		// Settings event listeners
		document.getElementById('show-grid')?.addEventListener('change', (e) => {
			visualization.updateChartSetting('showGrid', e.target.checked);
		});

		document.getElementById('show-x-grid')?.addEventListener('change', (e) => {
			visualization.updateChartSetting('showXGrid', e.target.checked);
		});

		document.getElementById('show-y-grid')?.addEventListener('change', (e) => {
			visualization.updateChartSetting('showYGrid', e.target.checked);
		});

		document.getElementById('point-style')?.addEventListener('change', (e) => {
			visualization.updateChartSetting('pointStyle', e.target.value);
		});

		document.getElementById('enable-animations')?.addEventListener('change', (e) => {
			visualization.updateChartSetting('enableAnimations', e.target.checked);
		});

		document.getElementById('legend-position')?.addEventListener('change', (e) => {
			visualization.updateChartSetting('legendPosition', e.target.value);
		});

		document.getElementById('title-size')?.addEventListener('input', (e) => {
			const value = parseInt(e.target.value);
			document.getElementById('title-size-value').textContent = `${value}px`;
			visualization.updateChartSetting('titleSize', value);
		});

		document.getElementById('label-size')?.addEventListener('input', (e) => {
			const value = parseInt(e.target.value);
			document.getElementById('label-size-value').textContent = `${value}px`;
			visualization.updateChartSetting('labelSize', value);
		});

		document.getElementById('tick-size')?.addEventListener('input', (e) => {
			const value = parseInt(e.target.value);
			document.getElementById('tick-size-value').textContent = `${value}px`;
			visualization.updateChartSetting('tickSize', value);
		});

		// No need to connect table metric select as we now have a unified view

		// Apply Configuration button
		document.getElementById('apply-config')?.addEventListener('click', () => {
			// Trigger a data refresh with the new configuration
			visualization.refreshBenchmarkData();
		});
	</script>
</body>

</html>