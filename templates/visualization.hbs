<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Benchmark Visualization</title>
    <script src="{{chartJsUri}}"></script>
    <style>
        body {
            font-family: var(--vscode-font-family);
            color: var(--vscode-foreground);
            background-color: var(--vscode-editor-background);
            padding: 20px;
            margin: 0;
        }

        h1,
        h2 {
            color: var(--vscode-editor-foreground);
        }

        .metadata {
            margin-bottom: 20px;
            padding: 10px;
            background-color: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 5px;
        }

        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background-color: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 5px;
        }

        .control-group {
            flex: 1;
            min-width: 200px;
        }

        .control-group h3 {
            margin-top: 0;
        }

        label {
            display: block;
            margin-bottom: 5px;
        }

        select,
        input[type="color"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            background-color: var(--vscode-input-background);
            color: var(--vscode-input-foreground);
            border: 1px solid var(--vscode-input-border);
            border-radius: 3px;
        }

        button {
            background-color: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 8px 16px;
            border-radius: 3px;
            cursor: pointer;
            margin-top: 10px;
        }

        button:hover {
            background-color: var(--vscode-button-hoverBackground);
        }

        .benchmark-list {
            max-height: 200px;
            overflow-y: auto;
            padding: 5px;
            background-color: var(--vscode-input-background);
            border: 1px solid var(--vscode-input-border);
            border-radius: 3px;
        }

        .benchmark-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .benchmark-item input {
            margin-right: 8px;
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin-top: 20px;
            padding: 15px;
            background-color: var(--vscode-editor-inactiveSelectionBackground);
            border-radius: 5px;
        }

        .color-palette {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .palette {
            cursor: pointer;
            display: flex;
            width: 100px;
            height: 20px;
            border-radius: 3px;
            overflow: hidden;
        }

        .palette-color {
            flex: 1;
            height: 100%;
        }

        .palette.selected {
            outline: 2px solid var(--vscode-focusBorder);
        }

        .custom-colors {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }

        .color-input {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .color-input input {
            margin-right: 5px;
            width: 50px;
        }

        .tooltip {
            background-color: var(--vscode-editor-background);
            border: 1px solid var(--vscode-input-border);
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>

<body>
    <h1>Benchmark Visualization</h1>

    <div class="metadata">
        <h2>Environment</h2>
        <p><strong>OS:</strong> {{metadata.goos}}</p>
        <p><strong>Arch:</strong> {{metadata.goarch}}</p>
        <p><strong>Package:</strong> {{metadata.pkg}}</p>
        <p><strong>CPU:</strong> {{metadata.cpu}}</p>
    </div>

    <div class="controls">
        <div class="control-group">
            <h3>Benchmarks</h3>
            <div class="benchmark-list">
                {{#each results}}
                <div class="benchmark-item">
                    <input type="checkbox" id="benchmark-{{@index}}" value="{{name}}" data-index="{{@index}}"
                        class="benchmark-checkbox" {{#if (lt @index 3)}}checked{{/if}}>
                    <label for="benchmark-{{@index}}">{{displayName}}</label>
                </div>
                {{/each}}
            </div>
        </div>

        <div class="control-group">
            <h3>Metrics</h3>
            <select id="metric-select">
                {{#each metrics}}
                <option value="{{id}}">{{name}}</option>
                {{/each}}
            </select>

            <h3>Chart Type</h3>
            <select id="chart-type">
                {{#each chartTypes}}
                <option value="{{id}}">{{name}}</option>
                {{/each}}
            </select>
        </div>

        <div class="control-group">
            <h3>Colors</h3>
            <div class="color-palette">
                {{#each colorPalettes}}
                <div class="palette {{#if (eq @key " default")}}selected{{/if}}" data-palette="{{@key}}">
                    {{#each this}}
                    {{#if (lt @index 5)}}
                    <div class="palette-color" style="background-color: {{this}}"></div>
                    {{/if}}
                    {{/each}}
                </div>
                {{/each}}
            </div>

            <div id="custom-colors" class="custom-colors">
                <!-- Custom color inputs will be added dynamically -->
            </div>
        </div>
    </div>

    <div class="chart-container">
        <canvas id="benchmarkChart"></canvas>
    </div>

    <script>
        // Store the benchmark data
        const benchmarkData = {{{ benchmarkData }}};

        // Store color palettes
        const colorPalettes = {{{ colorPalettesJson }}};
        let selectedPalette = 'default';
        let customColors = [...colorPalettes.default];

        // Initialize chart
        let benchmarkChart = null;

        // Get selected benchmarks
        function getSelectedBenchmarks() {
            const checkboxes = document.querySelectorAll('.benchmark-checkbox:checked');
            return Array.from(checkboxes).map(checkbox => {
                const index = parseInt(checkbox.dataset.index);
                return benchmarkData.results[index];
            });
        }

        // Get metric value from a run
        function getMetricValue(run, metricName) {
            if (!run.metrics) {
                return null;
            }

            const metric = run.metrics.find(m => m.name === metricName);
            return metric ? metric.value : null;
        }

        // Update the chart based on selected options
        function updateChart() {
            const selectedBenchmarks = getSelectedBenchmarks();
            const selectedMetric = document.getElementById('metric-select').value;
            const chartType = document.getElementById('chart-type').value;

            if (selectedBenchmarks.length === 0) {
                return;
            }

            // Send message to the extension with the selected options
            vscode.postMessage({
                command: 'updateVisualization',
                selectedBenchmarks: selectedBenchmarks.map(b => b.name),
                selectedMetric,
                chartType,
                chartColors: customColors
            });

            // Prepare chart data
            const datasets = [];

            // Process each selected benchmark
            selectedBenchmarks.forEach((benchmark, benchmarkIndex) => {
                // Group runs by parameter if available
                const paramGroups = new Map();

                benchmark.runs.forEach(run => {
                    let paramKey = 'default';

                    // If run has parameters, use the first parameter as the key
                    if (run.params && run.params.name) {
                        paramKey = run.params.name;
                    }

                    if (!paramGroups.has(paramKey)) {
                        paramGroups.set(paramKey, []);
                    }

                    paramGroups.get(paramKey).push(run);
                });

                // Create a dataset for each parameter group
                Array.from(paramGroups.entries()).forEach(([paramKey, runs], paramIndex) => {
                    // Calculate average value for each run
                    const data = [];

                    runs.forEach(run => {
                        const value = getMetricValue(run, selectedMetric);
                        if (value !== null) {
                            data.push(value);
                        } else {
                            data.push(null); // Use null for missing data
                        }
                    });

                    // Only include this dataset if it has data
                    if (data.some(value => value !== null)) {
                        // Create a dataset
                        const colorIndex = (benchmarkIndex + paramIndex) % customColors.length;
                        const baseColor = customColors[colorIndex];

                        const displayName = benchmark.name.replace('Benchmark', '');
                        const datasetLabel = paramKey !== 'default'
                            ? `${displayName} [${paramKey}]`
                            : displayName;

                        const dataset = {
                            label: datasetLabel,
                            data: data,
                            backgroundColor: setAlpha(baseColor, 0.5),
                            borderColor: baseColor,
                            borderWidth: 1,
                            hoverBackgroundColor: setAlpha(baseColor, 0.7),
                            hoverBorderColor: baseColor,
                            pointBackgroundColor: baseColor,
                            pointBorderColor: '#fff',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: baseColor
                        };

                        datasets.push(dataset);
                    }
                });
            });

            // Get chart labels
            const chartLabels = [];

            // Use parameter values as labels
            const allParams = new Set();
            selectedBenchmarks.forEach(benchmark => {
                benchmark.runs.forEach(run => {
                    if (run.params && run.params.name) {
                        allParams.add(run.params.name);
                    }
                });
            });

            const sortedParams = Array.from(allParams).sort((a, b) => {
                // If both are numeric, sort numerically
                const numA = parseFloat(a);
                const numB = parseFloat(b);
                if (!isNaN(numA) && !isNaN(numB)) {
                    return numA - numB;
                }
                // Otherwise, sort alphabetically
                return a.localeCompare(b);
            });

            // Use sorted params as labels
            chartLabels.push(...sortedParams);

            // If no parameters found, use numeric indices
            if (chartLabels.length === 0) {
                chartLabels.push('1', '2', '3', '4', '5');
            }

            // Prepare chart configuration
            const chartConfig = {
                type: chartType,
                data: {
                    labels: chartLabels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: getMetricLabel(selectedMetric)
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Parameter Value'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += formatMetricValue(context.parsed.y, selectedMetric);
                                    }
                                    return label;
                                }
                            }
                        },
                        legend: {
                            position: 'top'
                        },
                        title: {
                            display: true,
                            text: `Benchmark Results - ${getMetricLabel(selectedMetric)}`
                        }
                    }
                }
            };

            // Create or update the chart
            const ctx = document.getElementById('benchmarkChart').getContext('2d');

            if (benchmarkChart) {
                benchmarkChart.destroy();
            }

            benchmarkChart = new Chart(ctx, chartConfig);
        }

        // Helper function to set alpha of a color
        function setAlpha(color, alpha) {
            if (color.startsWith('#')) {
                const r = parseInt(color.slice(1, 3), 16);
                const g = parseInt(color.slice(3, 5), 16);
                const b = parseInt(color.slice(5, 7), 16);
                return `rgba(${r}, ${g}, ${b}, ${alpha})`;
            }
            return color;
        }

        // Helper function to get metric label
        function getMetricLabel(metric) {
            // Look up the metric in the select options for the formatted name
            const metricSelect = document.getElementById('metric-select');
            const option = Array.from(metricSelect.options).find(opt => opt.value === metric);
            if (option) {
                return option.text;
            }

            // Fallback to basic formatting
            switch (metric) {
                case 'ns/op': return 'Time (ns/op)';
                case 'B/op': return 'Memory (B/op)';
                case 'allocs/op': return 'Allocations (allocs/op)';
                case 'size': return 'Size';
                default:
                    // Format custom metrics
                    return metric
                        .replace(/_/g, ' ')
                        .replace(/\//g, ' per ')
                        .replace(/\b\w/g, c => c.toUpperCase());
            }
        }

        // Helper function to format metric values
        function formatMetricValue(value, metric) {
            switch (metric) {
                case 'ns/op':
                    if (value > 1000000) {
                        return `${(value / 1000000).toFixed(2)} ms/op`;
                    } else if (value > 1000) {
                        return `${(value / 1000).toFixed(2)} µs/op`;
                    } else {
                        return `${value.toFixed(2)} ns/op`;
                    }
                case 'B/op':
                    if (value > 1048576) {
                        return `${(value / 1048576).toFixed(2)} MB/op`;
                    } else if (value > 1024) {
                        return `${(value / 1024).toFixed(2)} KB/op`;
                    } else {
                        return `${value.toFixed(2)} B/op`;
                    }
                case 'allocs/op':
                    return `${value} allocs/op`;
                case 'size':
                    return `${value}`;
                default:
                    // Try to determine if the value is likely a time, memory, or count
                    if (metric.includes('/op')) {
                        if (metric.includes('ns') || metric.includes('time')) {
                            // Likely a time metric
                            if (value > 1000000) {
                                return `${(value / 1000000).toFixed(2)} ms`;
                            } else if (value > 1000) {
                                return `${(value / 1000).toFixed(2)} µs`;
                            } else {
                                return `${value.toFixed(2)} ns`;
                            }
                        } else if (metric.includes('byte') || metric.includes('size') || metric.includes('memory')) {
                            // Likely a memory metric
                            if (value > 1048576) {
                                return `${(value / 1048576).toFixed(2)} MB`;
                            } else if (value > 1024) {
                                return `${(value / 1024).toFixed(2)} KB`;
                            } else {
                                return `${value.toFixed(2)} B`;
                            }
                        }
                    }

                    // For decimal values, round to 2 decimal places
                    if (Math.floor(value) !== value) {
                        return value.toFixed(2);
                    }

                    // Default formatting
                    return `${value}`;
            }
        }

        // Update custom color inputs
        function updateCustomColorInputs() {
            const container = document.getElementById('custom-colors');
            container.innerHTML = '';

            // Get selected benchmarks and create color inputs for each
            const selectedBenchmarks = getSelectedBenchmarks();
            selectedBenchmarks.forEach((benchmark, index) => {
                const displayName = benchmark.name.replace('Benchmark', '');
                const colorIndex = index % customColors.length;

                const colorInput = document.createElement('div');
                colorInput.className = 'color-input';
                colorInput.innerHTML = `
                    <input type="color" data-index="${index}" value="${customColors[colorIndex]}">
                    <span>${displayName}</span>
                `;

                container.appendChild(colorInput);
            });

            // Add event listeners to color inputs
            document.querySelectorAll('#custom-colors input[type="color"]').forEach(input => {
                input.addEventListener('change', (event) => {
                    const index = parseInt(event.target.dataset.index);
                    customColors[index % customColors.length] = event.target.value;
                    updateChart();
                });
            });
        }

        // Add event listeners
        document.querySelectorAll('.benchmark-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                updateCustomColorInputs();
                updateChart();
            });
        });

        document.getElementById('metric-select').addEventListener('change', updateChart);
        document.getElementById('chart-type').addEventListener('change', updateChart);

        document.querySelectorAll('.palette').forEach(palette => {
            palette.addEventListener('click', (event) => {
                const paletteElement = event.target.closest('.palette');
                if (paletteElement) {
                    const paletteName = paletteElement.dataset.palette;
                    selectedPalette = paletteName;
                    customColors = [...colorPalettes[paletteName]];

                    // Update selected palette UI
                    document.querySelectorAll('.palette').forEach(p => {
                        p.classList.remove('selected');
                    });
                    paletteElement.classList.add('selected');

                    updateCustomColorInputs();
                    updateChart();
                }
            });
        });

        // Acquire VS Code API
        const vscode = acquireVsCodeApi();

        // Initialize the chart
        updateCustomColorInputs();
        updateChart();
    </script>
</body>

</html>